Exploiting DVAR servers
--------------------------------

=============================== Legitimate servers responses =======================================

------------------------------------ miniweb (port 80) ---------------------------------------------

> python -c "print 'GET / \r\n\r\n'" | nc 192.168.100.2 80
# OR python -c "print 'GET /\r\n\r\n'" | nc 192.168.100.2 80  (space after GET / optional)

HTTP/1.1 200 OK
Server: EXPLOITLAB ROP WARM-UP/2.0
Content-Length: 1056
Content-Type: text/html

<html>
<head>
<link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
<h1>The ARM Exploit Laboratory</h1>
<h2>ARM STACK OVERFLOW WARM-UP EXERCISE</h2>
<p>
This is a warm-up exercise for exploiting stack overflows. The underlying web server is vulnerable to a stack overflow. Your task is to identify the input that triggers this vulnerability and write a working exploit for it.
</p>
<p>
Follow the methodology, and get a shell!
<ul>
<li>Identify the vulnerable HTTP request.
<li>Analyze the crash.
<li>Is it a stack overflow? Check registers, stack memory.
<li>Determine the offset to the Program Counter (PC).
<li>Determine the position of the stack pointer relative to the beginning of the payload.
<li>Overwrite PC precisely.
<li>Plan the payload. Where shall you place the shellcode?
<li>Search for a suitable Jump-through-Register instruction in the binary or shared libraries.
<li>Inject and return to "test shellcode" (BKPT).
<li>Prepare a final working exploit.
</ul>
</p>

<H1><a href="basic.html">START &gt&gt</a></H1>
</html>

--------------------------------------- lightsrv (port 8080) ---------------------------------------
> python -c "print 'GET / \r\n\r\n'" | nc 192.168.100.2 8080       # Space after 'GET /' mandatory

# The following is the content of '/www/docroot/index.html' file in DVAR rootfs

HTTP/1.1 200 OK
Content-Type: text/html
Content-Length: 1428

<!doctype html public "-//w3c//dtd html 4.0 transit
<!-- (c) THE ARM EXPLOIT LABORATORY, Saumil Shah @therealsaumil -->
<html>
<head>
<link rel="stylesheet" type="text/css" href="styles.css">
<title>Lights Control</title>
<script>
var xhr, img;

function init()
{
   xhr = createXHR();
   img = document.getElementById("signal");
}

function lights(state)
{
   xhr.open("GET", "lights/" + state, true);
   xhr.onreadystatechange = function() { handleresponse(xhr); };
   xhr.send(null);
   return;
}

function handleresponse(xhr)
{
   if(xhr.readyState == 4 && xhr.status == 200) {
      if(xhr.responseText == "ON") {
         img.src = "walk.jpg";
      }
      else {
         img.src = "dont_walk.jpg";
      }
   }
}

function createXHR()
{
   try { return new XMLHttpRequest(); } catch(e) {}
   try { return new ActiveXObject("Msxml2.XMLHTTP.6.0"); } catch (e) {}
   try { return new ActiveXObject("Msxml2.XMLHTTP.3.0"); } catch (e) {}
   try { return new ActiveXObject("Msxml2.XMLHTTP"); } catch (e) {}
   try { return new ActiveXObject("Microsoft.XMLHTTP"); } catch (e) {}

   return null;
}
</script>
</head>
<body onload="init()" class="centrebody">
<h1>Lights Control</h1>
<div>
<img id="signal" src="dont_walk.jpg">
</div>
<div>
<button class="button-red" onclick="lights('off');">DONT<br>WALK</button> 
<button class="button-green" onclick="lights('on');">&nbsp;<br>WALK</button> 
</div>
</body>
</html>

================================= Crafting malicious HTTP request ==================================

