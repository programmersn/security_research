Firmware extraction/analysis
-----------------------------
    - (Next Interview) Setup and play around and get deep level mastery of ARM-x emulation environment for firmware dynamic analysis,
    - (Next Interview) Get up-to-date on IoT/Hardware/Embedded hacking and protection techniques
    - How to figure out the start address of the firmware
    - Investigate compression technique used to compress binary code of the firmware (whether zlib or other). Think entropy calculation
    - How to figure out the underlying architecture of a firmware's binary, from the assembly code.

Reverse Engineering
--------------------
    - Use-after-free vulnerability detection without source code (ie without ASAN/Valgrind), solely from debugging session/assembly code.

Instrumentation/Analysis techniques
------------------------------------
    - What exactly is symbolic execution ? vs concrete vs concolic execution
    - Set up Angr and play around with symbolic execution examples to have a better grasp on the concept.
    - How exactly ASAN is implemented (think Shadow memory technique)
    - Difference between ASAN, UBSAN, MSAN LLVM sanitizers.

Fuzzing
---------
    - Investigate deeply about Snapshot Fuzzing, how it exactly works, how it relates to other fuzzing strategies.
    - How EXACTLY AFL and AFL++ work ? Investigate coverage-guided fuzzing strategy they implement, and genetic algorithms they use in order to optimize by eliminating inputs that are likely to produce outputs already obtained.
    - How to exactly narrow down on the actual vulnerability that caused a crash with one of the fuzzing inputs ?
    - Investigate also about race conditions vulnerabilities (see TOCTTOU attacks)

Kernel Module Hacking
----------------------
    - Intimate understanding of difference between kernel code/kernel land/kernel space on one hand and user space/user land on the other hand, with examples illustrating both concepts at technical levels


Rust Programming
-----------------
    - Learn the basics
    - How much more secure its memory model is compared to C/C++

